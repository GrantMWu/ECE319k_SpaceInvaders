


ARM Macro Assembler    Page 1 


    1 00000000         ; BusyWait.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         
    5 00000000         ; Runs on TM4C123
    6 00000000         
    7 00000000         ; As part of Lab 7, students need to implement these two
                        functions
    8 00000000         ; This file is in the inc folder so it automatically wil
                       l be applied to labs 7 8 9 and 10
    9 00000000         
   10 00000000         
   11 00000000                 EXPORT           SPIOutCommand
   12 00000000                 EXPORT           SPIOutData
   13 00000000         
   14 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   15 00000000                 THUMB
   16 00000000                 ALIGN
   17 00000000         ; Used in ECE319K Labs 7,8,9,10. You write these two fun
                       ctions
   18 00000000         
   19 00000000         ; ***********SPIOutCommand*****************
   20 00000000         ; This is a helper function that sends an 8-bit command 
                       to the LCD.
   21 00000000         ; Inputs: R0 = 32-bit command (number)
   22 00000000         ;         R1 = 32-bit SPI status register address
   23 00000000         ;         R2 = 32-bit SPI data register address
   24 00000000         ;         R3 = 32-bit GPIO port address for D/C
   25 00000000         ; Outputs: none
   26 00000000         ; Assumes: SPI and GPIO have already been initialized an
                       d enabled
   27 00000000         ; Note: must be AAPCS compliant
   28 00000000         ; Note: access to bit 6 of GPIO must be friendly
   29 00000000         SPIOutCommand
   30 00000000         ; --UUU-- Code to write a command to the LCD
   31 00000000         ;1) Read the SPI status register (R1 has address) and ch
                       eck bit 4, 
   32 00000000         FirstRead
   33 00000000 F8D1 C000       LDR              R12, [R1]
   34 00000004 F00C 0C10       AND              R12, #0x10
   35 00000008 F1BC 0F10       CMP              R12, #0x10
   36 0000000C         
   37 0000000C         ;2) If bit 4 is high, loop back to step 1 (wait for BUSY
                        bit to be low)
   38 0000000C D0F8            BEQ              FirstRead
   39 0000000E         
   40 0000000E         ;3) Clear D/C (GPIO bit 6) to zero, be friendly (R3 has 
                       address)
   41 0000000E F8D3 C000       LDR              R12, [R3]
   42 00000012 F02C 0C40       BIC              R12, R12, #0x40
   43 00000016 F8C3 C000       STR              R12, [R3]
   44 0000001A         
   45 0000001A         ;4) Write the command to the SPI data register (R2 has a
                       ddress)
   46 0000001A 6010            STR              R0, [R2]
   47 0000001C         



ARM Macro Assembler    Page 2 


   48 0000001C         SecondRead
   49 0000001C         ;5) Read the SPI status register (R1 has address) and ch
                       eck bit 4, 
   50 0000001C F8D1 C000       LDR              R12, [R1]
   51 00000020 F00C 0C10       AND              R12, #0x10
   52 00000024 F1BC 0F10       CMP              R12, #0x10
   53 00000028         
   54 00000028         ;6) If bit 4 is high, loop back to step 5 (wait for BUSY
                        bit to be low)
   55 00000028 D0F8            BEQ              SecondRead
   56 0000002A         
   57 0000002A 4770            BX               LR          ;   return
   58 0000002C         
   59 0000002C         
   60 0000002C         
   61 0000002C         ; ***********SPIOutData*****************
   62 0000002C         ; This is a helper function that sends an 8-bit data to 
                       the LCD.
   63 0000002C         ; Inputs: R0 = 32-bit data (number)
   64 0000002C         ;         R1 = 32-bit SPI status register address
   65 0000002C         ;         R2 = 32-bit SPI data register address
   66 0000002C         ;         R3 = 32-bit GPIO port address for D/C
   67 0000002C         ; Outputs: none
   68 0000002C         ; Assumes: SPI and GPIO have already been initialized an
                       d enabled
   69 0000002C         ; Note: must be AAPCS compliant
   70 0000002C         ; Note: access to bit 6 of GPIO must be friendly
   71 0000002C         SPIOutData
   72 0000002C         ; --UUU-- Code to write data to the LCD
   73 0000002C         ;1) Read the SPI status register (R1 has address) and ch
                       eck bit 1, 
   74 0000002C         ReadReg
   75 0000002C F8D1 C000       LDR              R12, [R1]
   76 00000030 F00C 0C02       AND              R12, #0x02
   77 00000034 F1BC 0F02       CMP              R12, #0x02
   78 00000038         
   79 00000038         ;2) If bit 1 is low, loop back to step 1 (wait for TNF b
                       it to be high)
   80 00000038 D1F8            BNE              ReadReg
   81 0000003A         
   82 0000003A         ;3) Set D/C (GPIO bit 6) to one, be friendly (R3 has add
                       ress)
   83 0000003A F8D3 C000       LDR              R12, [R3]
   84 0000003E F04C 0C40       ORR              R12, #0x40
   85 00000042 F8C3 C000       STR              R12, [R3]
   86 00000046         
   87 00000046         ;4) Write the data to the SPI data register (R2 has addr
                       ess)
   88 00000046 6010            STR              R0, [R2]
   89 00000048         
   90 00000048 4770            BX               LR          ;return
   91 0000004A         ;****************************************************
   92 0000004A         
   93 0000004A 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
   94 0000004C                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4 --fpu=
SoftVFP --depend=.\busywait.d -o.\busywait.o -I.\RTE\_SpaceInvaders -I"C:\Users



ARM Macro Assembler    Page 3 


\Grant Wu\AppData\Local\Arm\Packs\ARM\CMSIS\6.1.0\CMSIS\Core\Include" -I"C:\Use
rs\Grant Wu\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123"
 --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 541" --predefi
ne="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --list=.\busywait.lst ..\in
c\BusyWait.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 14 in file ..\inc\BusyWait.s
   Uses
      None
Comment: .text unused
FirstRead 00000000

Symbol: FirstRead
   Definitions
      At line 32 in file ..\inc\BusyWait.s
   Uses
      At line 38 in file ..\inc\BusyWait.s
Comment: FirstRead used once
ReadReg 0000002C

Symbol: ReadReg
   Definitions
      At line 74 in file ..\inc\BusyWait.s
   Uses
      At line 80 in file ..\inc\BusyWait.s
Comment: ReadReg used once
SPIOutCommand 00000000

Symbol: SPIOutCommand
   Definitions
      At line 29 in file ..\inc\BusyWait.s
   Uses
      At line 11 in file ..\inc\BusyWait.s
Comment: SPIOutCommand used once
SPIOutData 0000002C

Symbol: SPIOutData
   Definitions
      At line 71 in file ..\inc\BusyWait.s
   Uses
      At line 12 in file ..\inc\BusyWait.s
Comment: SPIOutData used once
SecondRead 0000001C

Symbol: SecondRead
   Definitions
      At line 48 in file ..\inc\BusyWait.s
   Uses
      At line 55 in file ..\inc\BusyWait.s
Comment: SecondRead used once
6 symbols
340 symbols in table
